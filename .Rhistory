cat("\nHospitalizations: ",nrow(subset(People, Hospitalizations > 0)))
cat("\nHealthy: ",nrow(subset(People, Vitality== "Healthy")))
# dataframe to capture the daily results
dayResults <<- data.frame (
day = c(Currentday)
)
# people met by sick people
met <- unique(c(round(runif(nrow(subset(People, Vitality != "Dead" & Vitality == "Sick")) * round(runif(1, 0,maxMeet)), min=1, max=numPopulation))))
# if someone is already infected decrements their infectious period
People$infectious <- ifelse(People$Vitality != "Dead" & People$infectious > 0,People$infectious -1,People$infectious)
#people get immunity from the virus
People$immunised<- ifelse(People$Vitality != "Dead" & People$Vitality == "Sick" & People$infectious <= 0,HumanImmunity,People$immunised)
# person is now healthy
People$Vitality <- ifelse(People$Vitality != "Dead" & People$Vitality == "Sick" & People$infectious <= 0,"Healthy",People$Vitality)
# Met person has a chance of death after getting the virus, if they do not die they will get sick
People$Vitality[met] <- ifelse(People$Vitality != "Dead" & People$Vitality[met] == "Healthy" & round(runif(1),2) * People$immunised[met] < infectionPercentage,  if(round(runif(1),2) < deathPercentage) "Dead" else "Sick","Healthy")
# older people & those below 5 will have a higher chance of being hospitalized than younger people
People$Hospitalizations <-ifelse(People$Vitality != "Dead" & People$Vitality == "Sick" & (People$age > 50 | People$age < 5), if(round(runif(1),2) < HospitalizationRate + (People$age / 100)) People$Hospitalizations + 1 else People$Hospitalizations, if(round(runif(1),2) < HospitalizationRate) People$Hospitalizations + 1 else People$Hospitalizations)
# make day data frame
dayResults <<- cbind(dayResults, People[!names(People) %in% names(dayResults)])
# append daily results to pandemic data frame
PandemicData <- rbind.fill(PandemicData, dayResults)
}
# PLOT LOGIC
# get the gender distribution
genderDistribution <- aggregate(People[c('gender')], by=list(People$gender == "Female"), FUN=length)
names(genderDistribution) <- c("gender", "total")
genderDistribution$gender <- ifelse(genderDistribution$gender == FALSE, "Male", "Female")
cases <- data.frame(
titles = c("Total Cases","Total Deaths", "Active Cases"),
# when simulation ended i.e. final day of the pandemic << active cases
data = c(nrow(PandemicData[PandemicData$Vitality == "Sick",]),nrow(People[People$Vitality == "Dead",]),nrow(People[People$Vitality == "Sick",]) )
)
# number of sick broken down by gender
totalSick <- PandemicData[which(PandemicData$Vitality == 'Sick'),] %>% group_by(day,gender) %>% summarise(total = n())
# how many sick, Healthy & dead are there per day
simulationDailyTotal = data.frame(PandemicData %>% group_by(day,Vitality) %>% summarise(total = n()))
simulationDailyTotalHealthy = simulationDailyTotal[simulationDailyTotal$Vitality == "Healthy",]
simulationDailyTotalDead = simulationDailyTotal[simulationDailyTotal$Vitality == "Dead",]
simulationDailyTotalSick = simulationDailyTotal[simulationDailyTotal$Vitality == "Sick",]
# infected sick compared to those immunized. 1 being not immunised, and less than 1 being immunused
ImmunizedOrNot <- PandemicData[PandemicData$Vitality == "Sick",] %>% group_by(day,Vitality, immunised) %>% summarise(total = n())
# GENERATE PLOTS
#Population gender breakdown
ggplot(data=genderDistribution, aes(x=gender, y=total)) +
geom_bar(stat="identity")+
geom_text(aes(label=total), vjust=-0.3, size=3.5)+
labs(x='Gender', y='Total Population', title='Population gender breakdown')+theme_minimal()
# active cases, total deaths, and total infected
ggplot(cases, aes(x=titles, y=data, fill=titles)) +
geom_bar(stat="identity")+labs(x='Case Title', y='Case Number', title='Total Cases')+theme_minimal()
# Daily Infections by Gender
ggplot(totalSick, aes(fill=gender, y=total, x=day)) +
geom_bar(position='dodge', stat='identity')+
labs(x='Pandemic Days', y='Total infections', title='Daily Infections by Gender')+theme_minimal()
# Daily Infection sick compared to how many of them are immunized
ggplot(ImmunizedOrNot, aes(fill=immunised, y=total, x=day)) +
geom_bar(position='dodge', stat='identity')+
labs(x='Pandemic Days', y='Total Daily Iinfections', title='Daily Infections: Un-immunized [Lightblue] | Immunized [Darkblue]')+theme_minimal()
# How many people are healthy daily
p1 = ggplot(simulationDailyTotalHealthy, aes(x = day, y = total,)) +
geom_line(stat="identity",color='lightgreen',size=2)+labs(x='Pandemic Days', y='Total Healthy', title='Healthy individuals in population')+theme_minimal()
# how many people died per day
p2 = ggplot(simulationDailyTotalDead, aes(x = day, y = total)) +
geom_line(stat="identity",color='darkblue',size=3)+labs(x='Pandemic Days', y='Total Dead', title='Daily Dead Total')+theme_minimal()
# how many people are sick daily
p3 = ggplot(simulationDailyTotalSick, aes(x = day, y = total)) +
geom_line(stat="identity",color='darkred',size=2)+labs(x='Pandemic Days', y='Total Sick', title='Sick individuals in population')+theme_minimal()
grid.arrange(p1, p2, p3, ncol=1)
# THOUGHTS
# LIMITATIONS
# there is no way to vaccinate the people
# graphs dont show the total change through the infection period however they show daily changes
# no third gender
# people can not quarantine period
# people dont have connection groups i.e. a person can only meet people their connected to for exmaple people they work with
# people dont die at a higher rate based on age i.e. babies and elderly
# People dont have a period where they are in hospital, if they did they wouldnt be able to get sick nor infect others and their death percentage would be lowered
# there is no third state where someone is made so sick that they are no longer able to infect others i.e. someone is bed ridden
# no vaccine rollout days where a percentage of the population has access to vaccines and the others done
# no way to age select who gets the vaccine
#install.packages("plyr")
#install.packages("tidyverse")
#install.packages("dplyr")
#install.packages("gridExtra")
#install.packages("reshape")
library(reshape)
library(gridExtra)
library(plyr)
library(ggplot2)
library(dplyr)
# total number of people in the simulation
numPopulation <- 1000
#total number of people a person can meet, a person can also meet the same person more than once
maxMeet <- 10
# how long someone can spread the virus
infectiousPeriod <- 10
# number of patient Zeros within the simulation
numPatientZero <- 5
# how many days the pandemic runs for
runTime <- 20
# percentage chance of a person dying
deathPercentage <- 2/100
# infection percentage
infectionPercentage <- 30/100
# natural immunity after getting infected and surviving
HumanImmunity <- 5 / 100
# vaccine
vaccineInjection = HumanImmunity * 4
# the chance someone will be hospitalized after being sick
HospitalizationRate <- 5/100
# oldest someone can get hospitalized
hospitazationOldest <- 50
# youngest someone can get hospitalized
hospitazationYoungest <- 5
# a person has a random age between 1 & 99
# a person is assigned a random gender
# a person is born healthy
# a person is immunized if not their chance is a default 1
# a person has 0 Hospitalizations to begin with
# a person can be infectious for 10 days
# create data frame
People <<- data.frame (
age =  c(round(runif(numPopulation, min=1, max=99))),   # 0 - 99
gender = c(rpois(n = numPopulation, lambda = 10)),   # [Female, Male]
Vitality = c(rep("Healthy",numPopulation)),  #[Healthy, Sick, Dead]
immunised = c(rep(1,numPopulation)),  #  has this person been immunized?
Hospitalizations = c(rep(0, numPopulation)), # if a person has been hospitalized
infectious = c(rep(0, numPopulation)) #  if this person is sick they can infect others
)
# add sick people randomly
People$Vitality[sample(nrow(People),numPatientZero)] <- "Sick"
# increase infectious rate
People <- within(People, infectious[Vitality == 'Sick'] <- infectiousPeriod)
# change numbers to male and female
People$gender <- ifelse(People$gender %% 2 == 0, "Female", "Male")
# stores daily events
PandemicData <<- data.frame (
day = c(1)
)
#  add people to the day dataframe
PandemicData <<- cbind(PandemicData, People[!names(People) %in% names(PandemicData)])
# Day 1 results
cat("DAY", 1)
cat("Deaths",nrow(subset(People, Vitality== "Dead")))
cat("Sick",nrow(subset(People, Vitality== "Sick")))
cat("Hospitalizations",nrow(subset(People, Hospitalizations > 0)))
cat("Healthy",nrow(subset(People, Vitality== "Healthy")))
# each day of the pandemic
for (Currentday in 2:runTime){
cat("\n###########################################\n")
cat("DAY: ",Currentday)
cat("\nDeaths: ",nrow(subset(People, Vitality== "Dead")))
cat("\nSick: ",nrow(subset(People, Vitality== "Sick")))
cat("\nHospitalizations: ",nrow(subset(People, Hospitalizations > 0)))
cat("\nHealthy: ",nrow(subset(People, Vitality== "Healthy")))
# dataframe to capture the daily results
dayResults <<- data.frame (
day = c(Currentday)
)
# people met by sick people
met <- unique(c(round(runif(nrow(subset(People, Vitality != "Dead" & Vitality == "Sick")) * round(runif(1, 0,maxMeet)), min=1, max=numPopulation))))
# if someone is already infected decrements their infectious period
People$infectious <- ifelse(People$Vitality != "Dead" & People$infectious > 0,People$infectious -1,People$infectious)
#people get immunity from the virus
People$immunised<- ifelse(People$Vitality != "Dead" & People$Vitality == "Sick" & People$infectious <= 0,HumanImmunity,People$immunised)
# person is now healthy
People$Vitality <- ifelse(People$Vitality != "Dead" & People$Vitality == "Sick" & People$infectious <= 0,"Healthy",People$Vitality)
# Met person has a chance of death after getting the virus, if they do not die they will get sick
People$Vitality[met] <- ifelse(People$Vitality != "Dead" & People$Vitality[met] == "Healthy" & round(runif(1),2) * People$immunised[met] < infectionPercentage,  if(round(runif(1),2) < deathPercentage) "Dead" else "Sick","Healthy")
# older people & those below 5 will have a higher chance of being hospitalized than younger people
People$Hospitalizations <-ifelse(People$Vitality != "Dead" & People$Vitality == "Sick" & (People$age > 50 | People$age < 5), if(round(runif(1),2) < HospitalizationRate + (People$age / 100)) People$Hospitalizations + 1 else People$Hospitalizations, if(round(runif(1),2) < HospitalizationRate) People$Hospitalizations + 1 else People$Hospitalizations)
# make day data frame
dayResults <<- cbind(dayResults, People[!names(People) %in% names(dayResults)])
# append daily results to pandemic data frame
PandemicData <- rbind.fill(PandemicData, dayResults)
}
# PLOT LOGIC
# get the gender distribution
genderDistribution <- aggregate(People[c('gender')], by=list(People$gender == "Female"), FUN=length)
names(genderDistribution) <- c("gender", "total")
genderDistribution$gender <- ifelse(genderDistribution$gender == FALSE, "Male", "Female")
cases <- data.frame(
titles = c("Total Cases","Total Deaths", "Active Cases"),
# when simulation ended i.e. final day of the pandemic << active cases
data = c(nrow(PandemicData[PandemicData$Vitality == "Sick",]),nrow(People[People$Vitality == "Dead",]),nrow(People[People$Vitality == "Sick",]) )
)
# number of sick broken down by gender
totalSick <- PandemicData[which(PandemicData$Vitality == 'Sick'),] %>% group_by(day,gender) %>% summarise(total = n())
# how many sick, Healthy & dead are there per day
simulationDailyTotal = data.frame(PandemicData %>% group_by(day,Vitality) %>% summarise(total = n()))
simulationDailyTotalHealthy = simulationDailyTotal[simulationDailyTotal$Vitality == "Healthy",]
simulationDailyTotalDead = simulationDailyTotal[simulationDailyTotal$Vitality == "Dead",]
simulationDailyTotalSick = simulationDailyTotal[simulationDailyTotal$Vitality == "Sick",]
# infected sick compared to those immunized. 1 being not immunised, and less than 1 being immunused
ImmunizedOrNot <- PandemicData[PandemicData$Vitality == "Sick",] %>% group_by(day,Vitality, immunised) %>% summarise(total = n())
# GENERATE PLOTS
#Population gender breakdown
ggplot(data=genderDistribution, aes(x=gender, y=total)) +
geom_bar(stat="identity")+
geom_text(aes(label=total), vjust=-0.3, size=3.5)+
labs(x='Gender', y='Total Population', title='Population gender breakdown')+theme_minimal()
# active cases, total deaths, and total infected
ggplot(cases, aes(x=titles, y=data, fill=titles)) +
geom_bar(stat="identity")+labs(x='Case Title', y='Case Number', title='Total Cases')+theme_minimal()
# Daily Infections by Gender
ggplot(totalSick, aes(fill=gender, y=total, x=day)) +
geom_bar(position='dodge', stat='identity')+
labs(x='Pandemic Days', y='Total infections', title='Daily Infections by Gender')+theme_minimal()
# Daily Infection sick compared to how many of them are immunized
ggplot(ImmunizedOrNot, aes(fill=immunised, y=total, x=day)) +
geom_bar(position='dodge', stat='identity')+
labs(x='Pandemic Days', y='Total Daily Iinfections', title='Daily Infections: Un-immunized [Lightblue] | Immunized [Darkblue]')+theme_minimal()
# How many people are healthy daily
p1 = ggplot(simulationDailyTotalHealthy, aes(x = day, y = total,)) +
geom_line(stat="identity",color='lightgreen',size=2)+labs(x='Pandemic Days', y='Total Healthy', title='Healthy individuals in population')+theme_minimal()
# how many people died per day
p2 = ggplot(simulationDailyTotalDead, aes(x = day, y = total)) +
geom_line(stat="identity",color='darkblue',size=3)+labs(x='Pandemic Days', y='Total Dead', title='Daily Dead Total')+theme_minimal()
# how many people are sick daily
p3 = ggplot(simulationDailyTotalSick, aes(x = day, y = total)) +
geom_line(stat="identity",color='darkred',size=2)+labs(x='Pandemic Days', y='Total Sick', title='Sick individuals in population')+theme_minimal()
grid.arrange(p1, p2, p3, ncol=1)
# THOUGHTS
# LIMITATIONS
# there is no way to vaccinate the people
# graphs dont show the total change through the infection period however they show daily changes
# no third gender
# people can not quarantine period
# people dont have connection groups i.e. a person can only meet people their connected to for exmaple people they work with
# people dont die at a higher rate based on age i.e. babies and elderly
# People dont have a period where they are in hospital, if they did they wouldnt be able to get sick nor infect others and their death percentage would be lowered
# there is no third state where someone is made so sick that they are no longer able to infect others i.e. someone is bed ridden
# no vaccine rollout days where a percentage of the population has access to vaccines and the others done
# no way to age select who gets the vaccine
print("print 1")
sdata <- read.csv( "owid-covid-data.csv", header = TRUE, sep = ",")
sdata
sdata <- read.csv( "owid-covid-data.csv", header = TRUE, sep = ",")
readfile <- read.csv("owid-covid-data.csv")
readfile <- read.csv("owid-covid-data.csv")
sdata <- read.csv( "owid-covid-data", header = TRUE, sep = ",")
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~date,
y = ~total_cases,
color = ~location,
type = "scatter",
mode = "lines+markers",
line = list(width = 4)
)
C:\Users\University\Documents\GitHub\covid-19-data-science
Users\University\Documents\GitHub\covid-19-data-science
data_frame <- read.csv( "../owid-covid-data.csv", header = TRUE, sep = ",")
setwd("~/GitHub/covid-19-data-science")
nstall.packages("lubridate")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("lubridate")
data_frame <- read.csv( "owid-covid-data.csv", header = TRUE, sep = ",")
data_frame[is.na(data_frame)] <- 0 # replace NA with 0
# list of countries we are looking for
countries <- c("Australia", "China", "India","New Zealand","Sweden","Ukraine","United Kingdom","United States")
# total number of cases
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~location,
y = ~new_cases,
color = ~location,
type = "bar"
)
# total number of cases
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~location,
y = ~new_cases,
color = ~location,
type = "bar"
)
%>% add_bars(
width = ~1
)
# total number of cases
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~location,
y = ~new_cases,
color = ~location,
type = "bar"
)
%>%layout(title= list(text = "Total numbers of COVID-19 cases",font = "Helvetica"), font=t,
legend=list(title=list(text='Countries',font = "Helvetica")),
xaxis = list(title = list(text ='Countries', font = "Helvetica")),
yaxis = list(title = list(text ='Number of Cases', font = "Helvetica")),
plot_bgcolor='#e5ecf6')%>% add_bars(
width = ~1
)
library("plotly")
library("tidyverse")
library("lubridate")
data_frame <- read.csv( "owid-covid-data.csv", header = TRUE, sep = ",")
data_frame[is.na(data_frame)] <- 0 # replace NA with 0
# list of countries we are looking for
countries <- c("Australia", "China", "India","New Zealand","Sweden","Ukraine","United Kingdom","United States")
# total number of cases
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~location,
y = ~new_cases,
color = ~location,
type = "bar"
)
%>%layout(title= list(text = "Total numbers of COVID-19 cases",font = "Helvetica"), font=t,
legend=list(title=list(text='Countries',font = "Helvetica")),
xaxis = list(title = list(text ='Countries', font = "Helvetica")),
yaxis = list(title = list(text ='Number of Cases', font = "Helvetica")),
plot_bgcolor='#e5ecf6')%>% add_bars(
width = ~1
)
library("lubridate")
data_frame <- read.csv( "owid-covid-data.csv", header = TRUE, sep = ",")
data_frame[is.na(data_frame)] <- 0 # replace NA with 0
# list of countries we are looking for
countries <- c("Australia", "China", "India","New Zealand","Sweden","Ukraine","United Kingdom","United States")
# total number of cases
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~location,
y = ~new_cases,
color = ~location,
type = "bar"
)
#install.packages("lubridate")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("lubridate")
data_frame <- read.csv( "owid-covid-data.csv", header = TRUE, sep = ",")
data_frame[is.na(data_frame)] <- 0 # replace NA with 0
# list of countries we are looking for
countries <- c("Australia", "China", "India","New Zealand","Sweden","Ukraine","United Kingdom","United States")
# total number of cases
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~location,
y = ~new_cases,
color = ~location,
type = "bar"
)
# cases line graph
plot_ly(
data = data_frame[data_frame$location %in% countries,],
x = ~date,
y = ~total_cases,
color = ~location,
type = "scatter",
mode = "lines+markers",
line = list(width = 4)) %>% layout(title= list(text = "Total numbers of COVID-19 cases",font = "Helvetica"), font=t,
legend=list(title=list(text='Countries',font = "Helvetica")),
xaxis = list(title = list(text ='Date', font = "Helvetica")),
yaxis = list(title = list(text ='Number of Cases', font = "Helvetica"), type = "log"),
plot_bgcolor='#e5ecf6')
# QUESTION 3
countryGdp <- data_frame[data_frame$gdp_per_capita > 0,] %>% select(gdp_per_capita,total_cases_per_million,total_deaths_per_million, date,cardiovasc_death_rate)
countryGdp$date <- strftime(countryGdp$date, "%Y-%m") # get month only
countryGdpQuantile <- unname(quantile(countryGdp$gdp_per_capita)) # get quantile
cat("Poor Country: ",countryGdpQuantile[1],"\nAverage Country: ",countryGdpQuantile[2], "-",countryGdpQuantile[3],"\nRich Country: ",countryGdpQuantile[5],"+")
countryGdp$wealth <-  cut(countryGdp$gdp_per_capita, breaks=c(countryGdpQuantile[1],countryGdpQuantile[2],countryGdpQuantile[4],countryGdpQuantile[5]),labels=c("low", "average", "high"))
countryGdp <- drop_na(countryGdp)
# get cases by country wealth
lowCases <- countryGdp[countryGdp$wealth == 'low',] %>% group_by(date) %>% summarise(lowCases = max(total_cases_per_million)) %>% ungroup()
averageCases <- countryGdp[countryGdp$wealth == 'average',] %>% group_by(date) %>% summarise(averageCases = max(total_cases_per_million)) %>% ungroup()
highCases <- countryGdp[countryGdp$wealth == 'high',] %>% group_by(date) %>% summarise(highCases = max(total_cases_per_million)) %>% ungroup()
# join cases into one dataframe
countryWealth <- full_join(lowCases,averageCases)
countryWealth <- full_join(countryWealth, highCases)
# plot case wealth dataframe
plot_ly(countryWealth, x = ~date, y = ~countryWealth$lowCases, type = 'scatter', mode = "lines+markers", name = 'low') %>%
add_trace(y = ~averageCases, name = 'average', mode = 'lines+markers')%>%
add_trace(y = ~countryWealth$highCases, name = 'high', mode = 'lines+markers')%>% layout(title= list(text = "covid cases per-country by wealth",font = "Helvetica"), font=t,
legend=list(title=list(text='country wealth',font = "Helvetica")),
xaxis = list(title = list(text ='Date', font = "Helvetica")),
yaxis = list(title = list(text ='total cases per million', font = "Helvetica")),
plot_bgcolor='#e5ecf6')
# get death by country wealth
lowDeath <- countryGdp[countryGdp$wealth == 'low',] %>% group_by(date) %>% summarise(lowDeath = max(total_deaths_per_million), cardiovasc = ) %>% ungroup()
averageDeath <- countryGdp[countryGdp$wealth == 'average',] %>% group_by(date) %>% summarise(averageDeath = max(total_deaths_per_million)) %>% ungroup()
highDeath <- countryGdp[countryGdp$wealth == 'high',] %>% group_by(date) %>% summarise(highDeath = max(total_deaths_per_million)) %>% ungroup()
# join cases into one dataframe
countryWealthDeath <- full_join(lowDeath,averageDeath)
countryWealthDeath <- full_join(countryWealthDeath, highDeath)
# plot case wealth dataframe
plot_ly(countryWealthDeath, x = ~date, y = ~lowDeath, type = 'scatter', mode = "lines+markers", name = 'low') %>%
add_trace(y = ~averageDeath, name = 'average', mode = 'lines+markers')%>%
add_trace(y = ~highDeath, name = 'high', mode = 'lines+markers')
# QUESTION 4
# compare gdp to daily covid scores
excessMortality <- data_frame[, c("date", "excess_mortality")] # get date and mortality
excessMortality$date <- strftime(excessMortality$date, "%Y-%m") # remove day
monthlyExcessMortality <- excessMortality %>% group_by(date) %>% summarise(excess_mortality = sum(excess_mortality))
#wow <- data_frame %>% group_by(date) %>% summarise(total_sales = sum(excess_mortality)) %>% arrange(desc(total_sales))
vline <- function(x = 0, color = "lightgreen") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
plot_ly(
data = monthlyExcessMortality,
x = ~date,
y = ~excess_mortality,
color = ~excess_mortality,
type = "scatter",
mode = "lines+markers")%>% layout(shapes = list(vline("2020-06")),title = list(text = "Excess Mortality Rates",font = "Helvetica"),
legend=list(title=list(text='Excess Mortality',font = "Helvetica")),
xaxis = list(title = list(text ='Date', font = "Helvetica")),
yaxis = list(title = list(text ='total cases per million', font = "Helvetica")),
plot_bgcolor='#e5ecf6')
View(averageCases)
# get death by country wealth
lowDeath <- countryGdp[countryGdp$wealth == 'low',] %>% group_by(date) %>% summarise(lowDeath = max(total_deaths_per_million)) %>% mutate(deaths_per_hundred_K = lowDeath / 10) %>% ungroup()
View(lowDeath)
lowDeath <- countryGdp[countryGdp$wealth == 'low',] %>% group_by(date) %>% summarise(lowDeath = max(total_deaths_per_million)) %>% mutate(deaths_per_hundred_K = lowDeath / 10) %>% ungroup()
averageDeath <- countryGdp[countryGdp$wealth == 'average',] %>% group_by(date) %>% summarise(averageDeath = max(total_deaths_per_million)) %>% mutate(deaths_per_hundred_K = averageDeath / 10) %>% ungroup()
highDeath <- countryGdp[countryGdp$wealth == 'high',] %>% group_by(date) %>% summarise(highDeath = max(total_deaths_per_million))%>% mutate(deaths_per_hundred_K = highDeath / 10) %>% ungroup()
View(highDeath)
# get death by country wealth
lowDeath <- countryGdp[countryGdp$wealth == 'low',] %>% group_by(date) %>% summarise(lowDeath = max(total_deaths_per_million)) %>% mutate(deaths_per_hundred_K = lowDeath / 10, cardiovasc_death_rate = cardiovasc_death_rate) %>% ungroup()
# QUESTION 4
lowDeath$date <- strftime(countryGdp$date, "%Y") %>% group_by(date) %>%  summarise(lowDeath = sum(lowDeath))
# QUESTION 4
lowDeath$date <- strftime(lowDeath$date, "%Y") %>% group_by(date) %>%  summarise(lowDeath = sum(lowDeath))
# QUESTION 4
lowDeath$date <- strftime(lowDeath$date, "%Y")
# QUESTION 4
TESTER <- strftime(lowDeath$date, "%Y")
# QUESTION 4
TESTER <- strftime(lowDeath$date, "%y")
# QUESTION 4
TESTER <- lowDeath
TESTER$date <- strftime(TESTER$date, "%Y") # get month only
TESTER$date <- format(date, "%Y") # get month only
View(TESTER)
TESTER$date <- format(dates, "%Y") # get month only
TESTER <- format(date, "%Y") # get month only
TESTER$date <- strftime(TESTER$date, "%Y") # get month only
# QUESTION 4
TESTER <- lowDeath
TESTER$date <- strftime(TESTER$date, "%Y") # get month only
strptime('011402', format = "%d%y%m")
strptime('011402', format = "%y%m")
strptime('011402', format = "-%y%m")
TESTER$date <- as.yearqtr(date,           # Convert dates to quarterly
format = "%Y-%m")
#install.packages("lubridate")
install.packages("zoo")                              # Install & load zoo
library("zoo")
# QUESTION 4
TESTER <- lowDeath
TESTER$date <- as.yearqtr(date,format = "%Y-%m")
TESTER$date <- strftime(TESTER$date, "%Y-%m") # get month only
TESTER$date <- strftime(TESTER$date, "%y-%m") # get month only
TESTER$date <- strftime(TESTER$date, "%y") # get month only
TESTER$date <- gsub("\\-*", "", TESTER$date)
View(TESTER)
# QUESTION 4
TESTER <- lowDeath
TESTER$date <- gsub("\\--*", "", TESTER$date)
View(TESTER)
# QUESTION 4
TESTER <- lowDeath
TESTER$date <- gsub("\\-*", "", TESTER$date)
View(TESTER)
# QUESTION 4
TESTER <- lowDeath
TESTER$date <- sub(" -*", "", TESTER$date)
View(TESTER)
TESTER$date <- sub("-*", "", TESTER$date)
TESTER$date <- gsub("-*", "", TESTER$date)
library(stringr)
word("my string is sad", 1)
word("2001-01", 1)
word("2001 -01", 1)
# QUESTION 4
TESTER <- lowDeath
word("2020-01", 1, sep = fixed(" "))
word("2020-01", 1, sep = fixed("-"))
TESTER <- lowDeath
TESTER$date <- word(TESTER$date, 1, sep = fixed("-"))
lowCardiovasc = lowDeath %>% word(lowDeath$date, 1, sep = fixed("-"))
lowCardiovasc = lowDeath
lowCardiovasc <- lowDeath
averageCardiovasc <- averageDeath
highCardiovasc <- highDeath
# remove months from cardiovasc
word(lowCardiovasc$date, 1, sep = fixed("-"))
word(averageCardiovasc$date, 1, sep = fixed("-"))
word(highCardiovasc$date, 1, sep = fixed("-"))
View(lowCardiovasc)
lowCardiovasc$date <-  word(lowCardiovasc$date, 1, sep = fixed("-"))
averageCardiovasc$date <- word(averageCardiovasc$date, 1, sep = fixed("-"))
highCardiovasc$date <-  word(highCardiovasc$date, 1, sep = fixed("-"))
View(lowCardiovasc)
View(lowCardiovasc)
